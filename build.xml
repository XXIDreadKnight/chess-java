<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="create_run_jar" name="chess-game-mvc">
    <!-- ANT 1.7+ is required -->
    <!-- Define folder properties -->
    <property name="project.name" value="chess-java"/>
    <property name="src.dir" value="src"/>
    <property name="resources.dir" value="resources"/>
    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="${build.dir}/jar"/>
    <property name="main.class" value="src.Game"/> <!-- Update main class -->
    <property name="jar.name" value="${project.name}.jar"/>

    <!-- JUnit properties (adjust paths as needed) -->
    <property name="test.src.dir" value="test"/>
    <property name="test.classes.dir" value="${build.dir}/test-classes"/>
    <property name="test.reports.dir" value="${build.dir}/test-reports"/>
    <!-- Define classpath including JUnit JARs - download these or use Ivy/Maven Ant Tasks -->
    <path id="junit.classpath">
        <!-- Add paths to your downloaded JUnit 5 JARs here -->
        <!-- Example:
        <pathelement location="path/to/junit-platform-console-standalone-X.Y.Z.jar"/>
        -->
        <!-- Or include all jars from a lib directory -->
        <fileset dir="lib" includes="**/*.jar"/>
        <pathelement location="${classes.dir}"/> <!-- Include compiled main classes -->
    </path>
    <path id="test.classpath">
        <path refid="junit.classpath"/>
        <pathelement location="${test.classes.dir}"/>
    </path>

    <!-- Targets -->
    <target name="clean" description="Clean up build artifacts">
        <delete dir="${build.dir}"/>
    </target>

    <target name="init" description="Create build directories">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${jar.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${test.reports.dir}"/>
    </target>

    <target name="compile" depends="init" description="Compile main source code">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" classpathref="junit.classpath"> <!-- Add JUnit to compile path if needed -->
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <!-- Copy resources -->
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
    </target>

    <target name="compile-tests" depends="compile" description="Compile test source code">
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" includeantruntime="false" classpathref="test.classpath">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
    </target>

    <target name="test" depends="compile-tests" description="Run JUnit tests">
        <junitlauncher printsummary="true" haltonfailure="true">
            <classpath refid="test.classpath"/>
            <testclasses outputdir="${test.reports.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
                <listener type="legacy-plain" sendSysOut="true" sendSysErr="true"/>
                <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>
            </testclasses>
        </junitlauncher>
        <!-- Optional: Generate HTML report from XML -->
        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}/html"/>
        </junitreport>
    </target>

    <!-- Create a runnable JAR using jar-in-jar loader -->
    <target name="create_run_jar" depends="compile" description="Create runnable JAR with dependencies">
        <jar destfile="${jar.dir}/${jar.name}">
            <manifest>
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
                <attribute name="Rsrc-Main-Class" value="${main.class}"/>
                <attribute name="Class-Path" value="."/>
                <!-- Rsrc-Class-Path points to packaged dependencies -->
                <attribute name="Rsrc-Class-Path" value="./"/>
            </manifest>
            <zipfileset src="jar-in-jar-loader.zip"/> <!-- Include the loader -->
            <fileset dir="${classes.dir}"/> <!-- Include compiled classes and resources -->
            <!-- Add any external library JARs needed here if not using jar-in-jar for them -->
            <!-- <zipfileset dir="lib" includes="*.jar" prefix=""/> -->
        </jar>
        <echo message="Runnable JAR created at ${jar.dir}/${jar.name}"/>
    </target>

    <!-- Create a simple runnable JAR (no dependencies included) -->
    <target name="create_simple_jar" depends="compile" description="Create simple runnable JAR (no deps)">
        <jar destfile="${jar.dir}/${project.name}-simple.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
        <echo message="Simple JAR created at ${jar.dir}/${project.name}-simple.jar"/>
    </target>

</project>